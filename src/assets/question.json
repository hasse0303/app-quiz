{

  "questionList": [
    {
      "type": "oop",
      "question": "The method with the same name or different return type and difference in the parameters either in number or type is known as:",
      "answer": [
        {"text": "A. Function overloading"},
        {"text": "B. Compile Time Overloading", "correct": true}
      ]
    },
    {
      "type": "oop",
      "question": "The process by which one object can acquire the properties of another object:",
      "answer": [
        {"text": "A. Encapsulation"},
        {"text": "B. Inheritance", "correct": true},
        {"text": "C. Polymorphism"}
      ]
    },
    {
      "type": "oop",
      "question": "Constructors are used to:",
      "answer": [
        {"text": "A. To build a user interface."},
        {"text": "B. Free memory."},
        {"text": "C. Initialize a newly created object.", "correct": true},
        {"text": "D. To create a sub-class."}
      ]
    },
    {
      "type": "oop",
      "question": "An object that has more than one form is referred to as:",
      "answer": [
        {"text": "A. Inheritance"},
        {"text": "B. Interface"},
        {"text": "C. Abstract class"},
        {"text": "D. Polymorphism", "correct": true}
      ]
    },
    {
      "type": "oop",
      "question": "Information Hiding can also be termed as:",
      "answer": [
        {"text": "A. Data hiding"},
        {"text": "B. Encapsulation", "correct": true},
        {"text": "C. Inheritance"}
      ]
    },
    {
      "type": "oop",
      "question": "Pick the term that relates to polymorphism:",
      "answer": [
        {"text": "A. Dynamic binding", "correct": true},
        {"text": "B. Dynamic allocation"},
        {"text": "C. Static typing"},
        {"text": "D. Static allocation"}
      ]
    },
    {
      "type": "oop",
      "question": "Main method can be overridden:",
      "answer": [
        {"text": "A. True"},
        {"text": "B. False", "correct": true}
      ]
    },
    {
      "type": "oop",
      "question": "The keyword which is used to access the method or member variables from the superclass:",
      "answer": [
        {"text": "A. Super", "correct": true},
        {"text": "B. Using"},
        {"text": "C. Is_a"},
        {"text": "D. Has_a"}
      ]
    },
    {
      "type": "oop",
      "question": "Can objects of abstract classes be instantiated?",
      "answer": [
        {"text": "A. True"},
        {"text": "B. False", "correct": true}
      ]
    },
    {
      "type": "oop",
      "question": "When sub class declares a method that has the same type of arguments as a method declared by one of its superclasses, it is termed as:",
      "answer": [
        {"text": "A. Method overriding", "correct": true},
        {"text": "B. Method overloading"},
        {"text": "C. Operator overloading"},
        {"text": "D. Operator overriding"}
      ]
    },
    {
      "type": "sass",
      "question": "Can objects of abstract classes be instantiated?",
      "answer": [
        {"text": "A. True"},
        {"text": "B. False", "correct": true}
      ]
    },
    {
      "type": "css3",
      "question": "When sub class declares a method that has the same type of arguments as a method declared by one of its superclasses, it is termed as:",
      "answer": [
        {"text": "A. Method overriding", "correct": true},
        {"text": "B. Method overloading"},
        {"text": "C. Operator overloading"},
        {"text": "D. Operator overriding"}
      ]
    }
  ]
}
